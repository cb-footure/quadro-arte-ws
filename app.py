# -*- coding: utf-8 -*-
"""Otimizar Algoritmo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ozQFlfoZwhTQVG4WYovbjqnVDlaxqxm
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import streamlit as st
import requests
from sklearn.preprocessing import MinMaxScaler
import sklearn
from sklearn.metrics.pairwise import euclidean_distances
from sklearn.metrics.pairwise import paired_euclidean_distances
import numpy as np
from sklearn.preprocessing import StandardScaler 
import json
from pandas.io.json import json_normalize
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt 
import matplotlib.font_manager as font_manager
import matplotlib as mpl 
import pylab as pl
import glob as glob
from math import ceil
from sklearn import metrics
import matplotlib.pylab as pylab
import base64
import PIL
from PIL import Image
from PIL import Image, ImageDraw, ImageFilter
from PIL import Image, ImageDraw, ImageFont
from PIL import ImageOps
from random import randint
from time import sleep
import json
from pandas.io.json import json_normalize
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Arc, Rectangle, ConnectionPatch,Ellipse
from scipy.spatial import ConvexHull
from mplsoccer.pitch import Pitch
import io
import os


# %matplotlib inline
global df_posicao

st.title('Footure Análise de Campeonatos')
menu = ['Home','Gráficos time']
choice  = st.sidebar.selectbox('Menu',menu)



times_csv = pd.read_csv('csv_auxilar/times-id.csv')
ligas = list(times_csv['Competição'].unique())


if choice == 'Gráficos time':
  token = st.text_input('Senha')
  liga_selecionada = st.multiselect('Selecione a liga',ligas)
  df_liga = times_csv[times_csv['Competição'].isin(liga_selecionada)].reset_index(drop=True)

  lista_times = list(df_liga['Time'].unique())
  time_selecionado = st.selectbox('Selecione o time', lista_times)
  df_time = df_liga[df_liga['Time'] == time_selecionado].reset_index(drop=True)

  team_id = [(df_time['Id'][0])]
  nome_times = [(df_time['Time'][0])]
  From = st.text_input('Data de início (AAAA-MM-DD)')
  To = st.text_input('Data do fim (AAAA-MM-DD)')

  lista_medias = []

  for team,nome in zip(team_id,nome_times):
    headers= {'Accept': '*/*',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
    'Connection': 'keep-alive',
    'Host': 'searchapi.wyscout.com',
    'Origin': 'https://platform.wyscout.com',
    'Referer': 'https://platform.wyscout.com/app/?',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-site',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36'}

    payload = {'lang': 'en',
    'from':From,
    'to': To,
    'score': 'winning,draw,losing',
    'columns': 'name,team,goal,xgShot,shot,shotSuccess,shotSuccessPercentage,pass,passSuccess,passSuccessPercentage,possession,loss,lossLow,lossMedium,lossHigh,recovery,recoveryLow,recoveryMedium,recoveryHigh,duel,duelSuccess,duelSuccessPercentage,shotFromOutsideArea,positionalAttacks,positionalAttacksWithShot,positionalAttacksWithShotPercentage,counterattacks,counterattacksWithShot,counterattacksWithShotPercentage,setPieces,corner,cornerWithShot,cornerWithShotPercentage,freeKick,shotAfterFreeKick,shotAfterFreeKickPercentage,penalty,penaltyGoal,penaltyGoalPercentage,cross,crossSuccess,crossSuccessPercentage,deepCompletedCross,deepCompletedCrossSuccess,deepCompletedCrossPercentage,deepCompletedPass,deepCompletedPassSuccess,deepCompletedPassPercentage,ballDeliveryToPenaltyArea,controlledPenaltyAreaEntry,CrossToPenaltyArea,touchInBox,offensiveDuel,offensiveDuelSuccess,offensiveDuelSuccessPercentage,offside,concededGoal,shotAgainst,shotAgainstSuccess,shotAgainstSuccessPercentage,defensiveDuel,defensiveDuelSuccess,defensiveDuelSuccessPercentage,aerialDuel,aerialDuelSuccess,aerialDuelSuccessPercentage,tackle,tackleSuccess,tackleSuccessPercentage,interception,clearance,foul,yellowCard,redCard,forwardPass,forwardPassSuccess,forwardPassSuccessPercentage,backPass,backPassSuccess,backPassSuccessPercentage,verticalPass,verticalPassSuccess,verticalPassSuccessPercentage,longPass,longPassSuccess,longPassSuccessPercentage,passToFinalThird,passToFinalThirdSuccess,passToFinalThirdSuccessPercentage,progressivePass,progressivePassSuccess,progressivePassSuccessPercentage,smartPass,smartPassSuccess,smartPassSuccessPercentage,passesPerPossessionMinute,passesPerPossessionCount,longPassPercentage,averageShotDistance,averagePassLength,ppda',
    'venue': 'home,away',
    'token':token,
    'groupId': 1231619,
    'subgroupId': 289819}

    sleep(randint(2, 7))
    site = 'https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/stats?'.format(team)
    r= requests.get(site,headers=headers,data=payload)
    r.status_code

    parsed = json.loads(r.text)
    data = json.loads(r.text)
    df= pd.json_normalize(data,sep='_')


    stats_series = (df['matches']).to_dict()
    stats = pd.DataFrame.from_dict(stats_series)
    


    lista_partida = []
    frame_agregar = []
    lista_team_stats = []
    lista_opponent_stats = []
    
    for i in range(len(stats)):
      dicionario = (stats.iloc[i])
      for k,v in dicionario.items():
        novo_dic = v
        partida = (v['match']) 
        team_stats = (v['teamStats'])
        opponent_stats = (v['opponentTeamStats'])

        lista_partida.append(pd.DataFrame(data=partida,index=[0]))
        lista_team_stats.append(pd.DataFrame(data=team_stats,index=[0]))
        lista_opponent_stats.append(pd.DataFrame(data=opponent_stats, index = [0]))



    team_stats_geral = pd.concat(lista_team_stats, axis=0, ignore_index=True)
    opponent_stats_geral = pd.concat(lista_opponent_stats,axis=0,ignore_index=True)
    partida_geral = pd.concat(lista_partida,axis=0,ignore_index=True)

  lista_partidas = list(partida_geral[ 'name'].unique())
  partida_escolhida = st.selectbox('Selecione a partida',lista_partidas)
  info_partida_df = partida_geral[partida_geral['name'] == partida_escolhida].reset_index(drop=True)
  match_id = info_partida_df['id'][0]

  st.header('Escalação Inicial')
  headers = {'Accept': '*/*',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
    'Connection': 'keep-alive',
    'Host': 'searchapi.wyscout.com',
    'If-None-Match': """W/"db8740142e0f72035cce63805b405fa8""",
    'Origin': 'https://platform.wyscout.com',
    'Referer': 'https://platform.wyscout.com/app/?',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-site',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'}

  payload = {'match_id': match_id,
    'type': 'passes',
    'lang': 'en',
    'score': 'winning,draw,losing',
    'minutes': '',
    'formation': '',
    'opp_formation': '',
    'token': token,
    'groupId': '1231619',
    'subgroupId': '286367'}

  site = ('https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/pass_distributions?'.format(team_id[0]))
  r= requests.get(site,headers=headers,data=payload)



  parsed = json.loads(r.text)
  data = json.loads(r.text)
  df= json_normalize(data,sep='_') 

  nome_time = df['data_team_name'][0]
  jogo_placar = df['data_match_name'][0]

  mapa_series = (df['data_pass_distributions']).to_dict()
  mapa = pd.DataFrame.from_dict(mapa_series)
  mapa = mapa[:11]
  lista_df = []
  for i in range(len(mapa)):
      dicionario = (mapa.iloc[i])
      for k,v in dicionario.items():
        novo_dic = v 
        
        info_passe = (v['destinations'][:11])
        juntar_passe = pd.DataFrame.from_dict(info_passe)
        frame_agregar.append(juntar_passe)


      try:
        jogador = novo_dic['name']
        numero = novo_dic['number']
        x = novo_dic['avg_x']
        y = novo_dic['avg_y']
        time_in = novo_dic['timein']
        time_out = novo_dic['timeout']
        id_jogadoress = novo_dic['playerId']
      

        
        final = {'id':id_jogadoress,'Jogador':jogador,'numero':numero,'x': x,'y':y, 'In':time_in,'Out':time_out}
        df_final = pd.DataFrame(data=final, index=[0])

        lista_df.append(df_final)
  
      except:
        pass
  
  titulares = pd.concat(lista_df, axis=0, ignore_index=True)
 
  titulares = titulares[['Jogador','numero','In','Out','id']]
  st.table(titulares)
  lista_jogadores_titular = list(titulares['Jogador'])
  

  lista_graficos = ['','Mapa de passe','Posição defensiva','xG','Cruzamentos','Retomada de posse']
  gráfico_selecionados = st.selectbox('Escolha os gráficos',lista_graficos)
  

  filelist=glob.glob("*.csv")
  for file in filelist:
    os.remove(file)


  

  if gráfico_selecionados == 'Mapa de passe'  :
    def mapa_de_passe_streamlit():
      

      headers = {'Accept': '*/*',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive',
        'Host': 'searchapi.wyscout.com',
        'If-None-Match': """W/"db8740142e0f72035cce63805b405fa8""",
        'Origin': 'https://platform.wyscout.com',
        'Referer': 'https://platform.wyscout.com/app/?',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-site',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'}

      payload = {'match_id': match_id,
        'type': 'passes',
        'lang': 'en',
        'score': 'winning,draw,losing',
        'minutes': '',
        'formation': '',
        'opp_formation': '',
        'token': token,
        'groupId': '1231619',
        'subgroupId': '286367'}

      site = ('https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/pass_distributions?'.format(team_id[0]))
      r= requests.get(site,headers=headers,data=payload)
  
      r.status_code

      parsed = json.loads(r.text)
      data = json.loads(r.text)
      df= json_normalize(data,sep='_') 

      nome_time = df['data_team_name'][0]
      jogo_placar = df['data_match_name'][0]

      mapa_series = (df['data_pass_distributions']).to_dict()
      mapa = pd.DataFrame.from_dict(mapa_series)
      mapa = mapa[:11]
      


      lista_df = []
      frame_agregar = []

      for i in range(len(mapa)):
        dicionario = (mapa.iloc[i])
        for k,v in dicionario.items():
          novo_dic = v 
          
          info_passe = (v['destinations'][:11])
          print(info_passe)
          juntar_passe = pd.DataFrame.from_dict(info_passe)
          frame_agregar.append(juntar_passe)


          try:
            jogador = novo_dic['name']
            numero = novo_dic['number']
            x = novo_dic['avg_x']
            y = novo_dic['avg_y']
            time_in = novo_dic['timein']
            time_out = novo_dic['timeout']

              
            final = {'Jogador':jogador,'numero':numero,'x': x,'y':y, 'In':time_in,'Out':time_out}
            df_final = pd.DataFrame(data=final, index=[0])

            lista_df.append(df_final)
      
          except:
            pass

      posicao_media_geral = pd.concat(lista_df, axis=0, ignore_index=True)
      lista_df.clear()


      troca_passe = pd.concat(frame_agregar, axis=0, ignore_index=True)
      frame_agregar.clear()

      posicao_media_geral = posicao_media_geral[:11]
      index = posicao_media_geral['Jogador']
      posicao_media_geral = posicao_media_geral.set_index('Jogador')

      lista_escalação = []

      for x in range(len(posicao_media_geral)):
        numero_player = (posicao_media_geral['numero'][x])
        player = (posicao_media_geral.index[x])
        escalação = '{}- {}'.format(numero_player,player)
        lista_escalação.append(escalação)

      min_sub = str(posicao_media_geral['Out'].min())
      passe_simplificado = troca_passe[['code','player','playerId','to_success','from_success','himself']]

      numero =-1
      while (len(passe_simplificado)) > 0:

        numero += 1 
        df_new1 = (passe_simplificado[:11]).reset_index()
        passe_simplificado = passe_simplificado.drop(passe_simplificado.index[:11])
        nome_jogador = (df_new1['player'][numero])
        df_new1.to_csv('{}.csv'.format(nome_jogador))

      file_name = '*.csv'
      import glob
      f = glob.glob(file_name)
      

      for i in f:
        teste = pd.read_csv(i)
        teste = teste[['code','player', 'playerId', 'to_success','from_success', 'himself']]
        

        passador = teste[teste['himself']==True].reset_index()
        nome_passador = passador['player'][0]
        
        teste['passador'] = nome_passador
        

        # teste = teste.drop(teste.index[11:jogadores_utilizados])
        teste.drop(teste[teste['himself']==True].index, axis=0, inplace=True)
        teste = (teste[['code','passador', 'player','to_success']])
        teste.to_csv('{}.csv'.format(nome_passador))

      passe_juntado = []
      file_name_2 = '*.csv'
      g = glob.glob(file_name)
      for i in f:
        passe_unico = pd.read_csv(i, index_col=None, header=0, sep=',', low_memory=False)
        passe_juntado.append(passe_unico)
      passe_geral = pd.concat(passe_juntado, axis=0, ignore_index=True)
      passe_juntado.clear()    
      passe_geral.to_csv(r'passe_geral.csv')
      passe_geral = pd.read_csv('passe_geral.csv')
      passe_geral = passe_geral[['code','passador','player','to_success']]
    

      posicao_media_geral = posicao_media_geral.astype({'x':int,'y':int})
      posicao_media_geral.to_csv('posicao_media_geral.csv')
      passe_geral = passe_geral.astype({'to_success': int})
      passe_geral.to_csv('passe_geral.csv')

      posicao = posicao_media_geral 
     
   


    
      cor_fundo = '#2c2b2b'
      cor_time = '#8c979b'
      pitch = Pitch(pitch_type='wyscout', figsize=(15,10),pitch_color=cor_fundo,orientation='horizontal',half=False,
                  stripe=False, line_zorder=2)
      fig, ax = pitch.draw()

      
      cor_ponto = 'black' 
      

      posicao = posicao_media_geral 
      for i in range(len(posicao)):
        w = posicao.iloc[i]['x']
        z = posicao.iloc[i]['y']
        ax.scatter(w,z, color=cor_time, s=180,zorder=3)
        ax.annotate(str(posicao.numero[i]),xy= (w,z),rotation=-90,va='center',ha='center',fontsize=7) 

      for linha in range(len(passe_geral)):
        passe = (passe_geral['passador'][linha])
        recebeu = (passe_geral['player'][linha])
        quantidade_passes = (passe_geral['to_success'][linha])
        distancia_ponto = 3
          

        x_inicial = (posicao.loc['{}'.format(passe),'x'])
        x_final = (posicao.loc['{}'.format(recebeu),'x'])
        y_inicial = (posicao.loc['{}'.format(passe),'y'])
        y_final = (posicao.loc['{}'.format(recebeu),'y'])

        frente = (x_final > x_inicial)
        tras =  (x_final < x_inicial)
        esquerda = (y_final < y_inicial)
        direita = (y_final > y_inicial)


        curto_frente = ((x_final - x_inicial) < 9 and (x_final - x_inicial) > 0 )
        curto_tras =  ((x_inicial - x_final) < 9 and (x_inicial - x_final) > 0)
        curto_direita = ((y_final - y_inicial) < 9 and (y_final - y_inicial) > 0)
        curto_esquerda = ((y_inicial - y_final) < 9 and (y_inicial - y_final) > 0) 
          

        cor_ponto = 'white'
        linha_forte = 2.5
        cor_linha = '#00FFD2'
        linha_fraca = 0.5
        s=10
        
        if quantidade_passes > 8:
          if True:
            if curto_frente and curto_direita:
              plt.scatter(x_final - 1.5, y_final - 3, s=s, color=cor_ponto,zorder=3)
              plt.plot([x_inicial + 1.5, x_final - 1.5], [y_inicial + 1, y_final - 3], color=cor_linha, linewidth=linha_forte)
            elif curto_frente and direita:
              plt.scatter(x_final -1, y_final -3,s=s, color=cor_ponto,zorder=3)
              plt.plot([x_inicial -1 ,x_final -1 ],[y_inicial +3 ,y_final -3 ], color=cor_linha, linewidth=linha_forte)
            elif curto_direita and frente:
              plt.scatter(x_final -3, y_final -1.5  ,s=s, color=cor_ponto,zorder=3)
              plt.plot([x_inicial +3 ,x_final -3 ],[y_inicial  ,y_final -1.5  ], color=cor_linha, linewidth=linha_forte)
            else:
              if frente and direita:
                plt.scatter(x_final -2   , y_final -2   ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial +2   ,x_final -2  ],[y_inicial +2   ,y_final -2 ], color=cor_linha, linewidth=linha_forte) 

          if True:
            if curto_tras and curto_esquerda:
                plt.scatter(x_final + 1.5, y_final + 3, s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial - 1.5, x_final + 1.5], [y_inicial - 1, y_final + 3], color=cor_linha, linewidth=linha_forte)
            elif curto_tras and esquerda:
                plt.scatter(x_final +0.5 , y_final +3,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial +0.5  ,x_final +0.5  ],[y_inicial -3 ,y_final +3 ], color=cor_linha, linewidth=linha_forte)
            elif curto_esquerda and tras:
                plt.scatter(x_final +3 , y_final+1.5   ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial -3 ,x_final +3 ],[y_inicial  ,y_final +1.5  ], color=cor_linha, linewidth=linha_forte)
            else:
                if tras and esquerda: 
                    plt.scatter(x_final +2   , y_final +2   ,s=s, color=cor_ponto,zorder=3)
                    plt.plot([x_inicial -2   ,x_final +2  ],[y_inicial -2   ,y_final +2 ], color=cor_linha, linewidth=linha_forte)
          if True:
            if curto_frente and curto_esquerda:
                plt.scatter(x_final, y_final, s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial, x_final], [y_inicial, y_final], color=cor_linha, linewidth=linha_forte)
            elif curto_frente and esquerda:
                plt.scatter(x_final, y_final +3 ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial +1 ,x_final  ],[y_inicial -3 ,y_final +3 ], color=cor_linha, linewidth=linha_forte)
            elif curto_esquerda and frente:
                plt.scatter(x_final -3 , y_final +1.5   ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial +3 ,x_final -3 ],[y_inicial +1.5  ,y_final +1.5  ], color=cor_linha, linewidth=linha_forte)
            else:
                if  frente and esquerda: 
                  plt.scatter(x_final -1.5  , y_final +3  ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial +2   ,x_final -1.5   ],[y_inicial +1,y_final +3 ], color=cor_linha, linewidth=linha_forte)
          
          if True:
            if curto_tras and curto_direita:
                plt.scatter(x_final, y_final, s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial, x_final], [y_inicial, y_final], color=cor_linha, linewidth=linha_forte)
            elif curto_tras and direita:
                plt.scatter(x_final, y_final -3 ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial -1  ,x_final  ],[y_inicial +3 ,y_final -3 ], color=cor_linha, linewidth=linha_forte)
            elif curto_direita and tras:
                plt.scatter(x_final +3 , y_final -1.5   ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial -3 ,x_final +3 ],[y_inicial -1.5  ,y_final -1.5  ], color=cor_linha, linewidth=linha_forte)
            else:
                if tras and direita: 
                    plt.scatter(x_final + 1.5, y_final - 3, s=s, color=cor_ponto,zorder=3)
                    plt.plot([x_inicial - 2, x_final + 1.5], [y_inicial - 1, y_final - 3], color=cor_linha, linewidth=linha_forte)


        if quantidade_passes > 3 : 
          if True:
              if curto_frente and curto_direita:
                plt.scatter(x_final - 1.5, y_final - 3, s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial + 1.5, x_final - 1.5], [y_inicial + 1, y_final - 3], color=cor_linha, linewidth=linha_fraca)
              elif curto_frente and direita:
                plt.scatter(x_final -1, y_final -3,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial -1 ,x_final -1 ],[y_inicial +3 ,y_final -3 ], color=cor_linha, linewidth=linha_fraca)
              elif curto_direita and frente:
                plt.scatter(x_final -3, y_final -1.5  ,s=s, color=cor_ponto,zorder=3)
                plt.plot([x_inicial +3 ,x_final -3 ],[y_inicial  ,y_final -1.5  ], color=cor_linha, linewidth=linha_fraca)
              else:
                if frente and direita:
                  plt.scatter(x_final -2   , y_final -2   ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial +2   ,x_final -2  ],[y_inicial +2   ,y_final -2 ], color=cor_linha, linewidth=linha_fraca) 

          if True:
              if curto_tras and curto_esquerda:
                  plt.scatter(x_final + 1.5, y_final + 3, s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial - 1.5, x_final + 1.5], [y_inicial - 1, y_final + 3], color=cor_linha, linewidth=linha_fraca)
              elif curto_tras and esquerda:
                  plt.scatter(x_final +0.5 , y_final +3,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial +0.5  ,x_final +0.5  ],[y_inicial -3 ,y_final +3 ], color=cor_linha, linewidth=linha_fraca)
              elif curto_esquerda and tras:
                  plt.scatter(x_final +3 , y_final+1.5   ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial -3 ,x_final +3 ],[y_inicial  ,y_final +1.5  ], color=cor_linha, linewidth=linha_fraca)
              else:
                  if tras and esquerda: 
                      plt.scatter(x_final +2   , y_final +2   ,s=s, color=cor_ponto,zorder=3)
                      plt.plot([x_inicial -2   ,x_final +2  ],[y_inicial -2   ,y_final +2 ], color=cor_linha, linewidth=linha_fraca)
          if True:
              if curto_frente and curto_esquerda:
                  plt.scatter(x_final, y_final, s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial, x_final], [y_inicial, y_final], color=cor_linha, linewidth=linha_fraca)
              elif curto_frente and esquerda:
                  plt.scatter(x_final, y_final +3 ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial +1 ,x_final  ],[y_inicial -3 ,y_final +3 ], color=cor_linha, linewidth=linha_fraca)
              elif curto_esquerda and frente:
                  plt.scatter(x_final -3 , y_final +1.5   ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial +3 ,x_final -3 ],[y_inicial +1.5  ,y_final +1.5  ], color=cor_linha, linewidth=linha_fraca)
              else:
                  if  frente and esquerda: 
                    plt.scatter(x_final -1.5  , y_final +3  ,s=s, color=cor_ponto,zorder=3)
                    plt.plot([x_inicial +2   ,x_final -1.5   ],[y_inicial +1,y_final +3 ], color=cor_linha, linewidth=linha_fraca)
            
          if True:
              if curto_tras and curto_direita:
                  plt.scatter(x_final, y_final, s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial, x_final], [y_inicial, y_final], color=cor_linha, linewidth=linha_fraca)
              elif curto_tras and direita:
                  plt.scatter(x_final, y_final -3 ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial -1  ,x_final  ],[y_inicial +3 ,y_final -3 ], color=cor_linha, linewidth=linha_fraca)
              elif curto_direita and tras:
                  plt.scatter(x_final +3 , y_final -1.5   ,s=s, color=cor_ponto,zorder=3)
                  plt.plot([x_inicial -3 ,x_final +3 ],[y_inicial -1.5  ,y_final -1.5  ], color=cor_linha, linewidth=linha_fraca)
              else:
                  if tras and direita: 
                      plt.scatter(x_final + 1.5, y_final - 3, s=s, color=cor_ponto,zorder=3)
                      plt.plot([x_inicial - 2, x_final + 1.5], [y_inicial - 1, y_final - 3], color=cor_linha, linewidth=linha_fraca) 
          
            
      
      plt.savefig('mapa_passe.png',dpi=300,facecolor = cor_fundo)  
      sleep(15)
                



      matrix = passe_geral.groupby(['passador','player'])['to_success'].sum().unstack(fill_value=0)
      top_recebedores = matrix.sum(axis=0).sort_values(ascending=False).reset_index()
      top_passadores = matrix.sum(axis=1).sort_values(ascending=False).reset_index()

      top_1_passador = top_passadores['passador'][0]
      top_2_passador = top_passadores['passador'][1]
      top_3_passador = top_passadores['passador'][2]

      top_1_recebedor = top_recebedores['player'][0]
      top_2_recebedor = top_recebedores['player'][1]
      top_3_recebedor = top_recebedores['player'][2]

      import glob
      import os
      cor_fundo = '#2c2b2b'
      filelist=glob.glob("*.csv")
      for file in filelist:
        os.remove(file)
      
      im = Image.open('mapa_passe.png')
      cor_fundo = '#2c2b2b'
      tamanho_arte = (3000,2740)
      arte = Image.new('RGB',tamanho_arte,cor_fundo)
      W,H = arte.size
      im = im.rotate(90,expand=5)
      w,h = im.size
      im = im.copy()

      arte.paste(im,(300,400))

      font = ImageFont.truetype('Fonte/Camber-Bd.ttf',150)
      msg = f'Mapa de passe'
      draw = ImageDraw.Draw(arte)
      w, h = draw.textsize(msg,spacing=20,font=font)
      draw.text((450,100),msg, fill='white',spacing= 20,font=font)

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',60)
      msg = f'{partida_escolhida}'
      draw.text((450,380),msg, fill='white',spacing= 20,font=font)
      
      altura = 500
      for linha in range(len(titulares)):
        altura += 70
        nome = titulares['Jogador'][linha]
        numero = titulares['numero'][linha]



        font = ImageFont.truetype('Fonte/Camber-Rg.ttf',45)
        msg = f'{numero}-{nome}'
        draw = ImageDraw.Draw(arte)
        w, h = draw.textsize(msg,spacing=20,font=font)
        draw.text(((1800,altura)),msg, fill='white',spacing= 20,font=font)


      fot =Image.open('Logos/Copy of pro_branco.png')
      w,h = fot.size
      fot = fot.resize((int(w/2.5),int(h/2.5)))
      fot = fot.copy()
      arte.paste(fot,(1780,2400),fot)

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',50)
      msg = f'Linhas fortes para mais de 8 passes \nLinhas fracas para mais de 3 passes \nMapa de passes feito até os {min_sub} minutos '
      draw = ImageDraw.Draw(arte)
      w, h = draw.textsize(msg,spacing=20,font=font)
      draw.text(((450,2500)),msg, fill='white',spacing= 20,font=font)

      logo_url = times_csv[times_csv['Id'] == team_id[0]].reset_index(drop=True)['Logo'][0]
      try:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(2500,100),im)
      except:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(2500,100))



      fonte_sub = 'Fonte/Camber-Bd.ttf'
      titulo = 'Top passadores'
      font = ImageFont.truetype(fonte_sub,80)
      draw = ImageDraw.Draw(arte)
      draw.text((1800,1600), titulo, fill='White',spacing= 10,font=font)


      best_passadores =  '1-{}\n2-{}\n3-{}'.format(top_1_passador,top_2_passador,top_3_passador)
      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',45)
      draw = ImageDraw.Draw(arte)
      draw.text((1800,1750), best_passadores, fill='White',spacing= 20,font=font)



      arte.save('arte_mapa_passe.png')
      st.image('arte_mapa_passe.png')

    mapa_de_passe_streamlit()

  if gráfico_selecionados == 'Posição defensiva':

    def posicao_defensiva_streamlit():
      lista_scrapes = ['interceptions','defensive_duels','tackles','clearence','aerial_duels','fouls']
      lista_df_geral = []
      for metrica in lista_scrapes:
        headers = {'Accept': '*/*',
                  'Accept-Encoding': 'gzip, deflate, br',
                  'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
                  'Connection': 'keep-alive',
                  'Host': 'searchapi.wyscout.com',
                  'Origin': 'https://platform.wyscout.com',
                  'Referer': 'https://platform.wyscout.com/app/?',
                  'Sec-Fetch-Mode': 'cors',
                  'Sec-Fetch-Site': 'same-site',
                  'User-Agent': 'Mozilla/5.0 (X11; CrOS armv7l 12607.81.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.119 Safari/537.36'} 

        payload = {'match_id': match_id,
                    'type': metrica, 
                    'lang': 'en',
                    'score': 'winning,draw,losing',
                    'minutes': '',
                    'formation': '',
                    'opp_formation': '',
                    'lang': 'en',
                    'token': token,
                    'groupId': '1231619',
                    'subgroupId': '286367'}  
        site = 'https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/events?'.format(team_id[0])
        r = requests.get(site, headers=headers,data=payload)
        if r.status_code ==200:
          st.write(f'Coletando {metrica}')
        else:
          st.write('ERRO')
        parsed = json.loads(r.text)
        data = json.loads(r.text)
        df= json_normalize(data,sep='_')

        df_series = (df['data_events']).to_dict()
        df_metricas = pd.DataFrame.from_dict(df_series[0])
        df_metricas['type'] = metrica
        df_metricas = df_metricas.drop_duplicates('id').reset_index(drop=True)
        lista_df_geral.append(df_metricas)

      acoes_defensivas = pd.concat(lista_df_geral, axis=0, ignore_index=True)
      acoes_defensivas = acoes_defensivas[acoes_defensivas['type']!= 'passes'].reset_index(drop=True)
      # lista_df_geral[-1]
      total = acoes_defensivas.groupby('name')[['x','y']].mean().reset_index()
      total = total[total['name'].isin(lista_jogadores_titular)].reset_index(drop=True)
      total = titulares.merge(total,left_on = 'Jogador', right_on='name')
      if len(total) >10:
        total = total.tail(10).reset_index(drop=True)
    
      
      cor_linhas_campo = 'white'

      cor_fundo = '#2c2b2b'
      # fig, ax = plt.subplots(figsize=(15,10))
      # pitch = Pitch(pitch_type='uefa', figsize=(15,10),pitch_color=cor_fundo,
      #                       stripe=False, line_zorder=2)
      # pitch.draw(ax=ax)
      pitch = Pitch(pitch_type='wyscout', figsize=(15,10),pitch_color=cor_fundo,orientation='horizontal',half=False,
                      stripe=False, line_zorder=2)
      fig, ax = pitch.draw()

      for i in range(len(total)):
        x = total['x'][i]
        y = total['y'][i]

        plt.scatter(x,y,color='white',zorder=3,s=500)
        ax.annotate(str(total.numero[i]),xy= (x,y) ,rotation=-90,size=10,va='center',ha='center')

      def encircle(x,y, ax=None, **kw):
        if not ax: ax=plt.gca()
        p = np.c_[x,y]
        hull = ConvexHull(p)
        poly = plt.Polygon(p[hull.vertices,:], **kw)
        ax.add_patch(poly)

      encircle(total['x'], total['y'], ec="k", fc="pink", alpha=0.7)
      plt.savefig('posicao_defensivo.png',facecolor=cor_fundo,dpi=300)
      sleep(30)
      # st.image('posicao_defensivo.png')
      

      im = Image.open('posicao_defensivo.png')
      cor_fundo = '#2c2b2b'
      tamanho_arte = (3000,2740)
      arte = Image.new('RGB',tamanho_arte,cor_fundo)
      W,H = arte.size
      im = im.rotate(90,expand=5)
      w,h = im.size
      # st.write(im.size)
      im = im.copy()

      arte.paste(im,(300,400))

      font = ImageFont.truetype('Fonte/Camber-Bd.ttf',150)
      msg = f'Posição Defensiva'
      draw = ImageDraw.Draw(arte)
      w, h = draw.textsize(msg,spacing=20,font=font)
      draw.text((450,100),msg, fill='white',spacing= 20,font=font)

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',60)
      msg = f'{partida_escolhida}'
      draw.text((450,380),msg, fill='white',spacing= 20,font=font)
      
      altura = 500
      for linha in range(len(titulares)):
        altura += 100
        nome = titulares['Jogador'][linha]
        numero = titulares['numero'][linha]



        font = ImageFont.truetype('Fonte/Camber-Rg.ttf',60)
        msg = f'{numero}-{nome}'
        draw = ImageDraw.Draw(arte)
        w, h = draw.textsize(msg,spacing=20,font=font)
        draw.text(((1800,altura)),msg, fill='white',spacing= 20,font=font)


      fot =Image.open('Logos/Copy of pro_branco.png')
      w,h = fot.size
      fot = fot.resize((int(w/2),int(h/2)))
      fot = fot.copy()
      arte.paste(fot,(1780,1900),fot)

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',50)
      msg = f'*Os pontos correspondem a posição média dos jogadores, baseado em suas ações defensivas'
      draw = ImageDraw.Draw(arte)
      w, h = draw.textsize(msg,spacing=20,font=font)
      draw.text(((450,2500)),msg, fill='white',spacing= 20,font=font)

      logo_url = times_csv[times_csv['Id'] == team_id[0]].reset_index(drop=True)['Logo'][0]
      try:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(2500,100),im)
      except:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(2500,100))

      
      
      
      arte.save('defensivo_arte.png')
      st.image('defensivo_arte.png')
    posicao_defensiva_streamlit()

  if gráfico_selecionados == 'Cruzamentos':
    def cruzamentos_streamlit():
      headers=  {'Accept': '*/*',
                  'Accept-Encoding': 'gzip, deflate, br',
                  'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
                  'Connection': 'keep-alive',
                  'Host': 'searchapi.wyscout.com',
                  'If-None-Match': """W/"e11ba3ebb05a9acb4c271e86488a5b00""",
                  'Origin': 'https://platform.wyscout.com',
                  'Referer': 'https://platform.wyscout.com/app/?',
                  'Sec-Fetch-Dest': 'empty',
                  'Sec-Fetch-Mode': 'cors',
                  'Sec-Fetch-Site': 'same-site',
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36' } 



      payload = {'match_id': match_id,
                'type': 'crosses',
                'lang': 'en',
                'score': 'winning,draw,losing',
                'minutes':'', 
                'formation':'', 
                'opp_formation':'', 
                'lang': 'en',
                'token': token,
                'groupId': '1231619',
                'subgroupId': '289819'} 


      site = ('https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/events?'.format(team_id[0]))
      r = requests.get(site,headers=headers,data=payload)
      if r.status_code == 200:
        st.write('Calculando cruzamentos')
      if r.status_code != 200:
        st.write('Erro')
      parsed = json.loads(r.text)
      data = json.loads(r.text)
      df= json_normalize(data,sep='_') 
      cruzamentos_series = (df['data_events']).to_dict()
      cruzamentos = pd.DataFrame.from_dict(cruzamentos_series)


      lista_df_cruzamentos = []

      for i in range(len(cruzamentos)):
        dicionario = (cruzamentos.iloc[i])
        for k,v in dicionario.items():
          novo_dic = v
        
          df_final = pd.DataFrame(data=v, index=[0])
          lista_df_cruzamentos.append(df_final)

      cruzamento = pd.concat(lista_df_cruzamentos, axis=0, ignore_index=True)
      lista_df_cruzamentos.clear()
      cruzamento_certo =cruzamento[cruzamento['successful'] == 1].reset_index(drop=True)
      cruzamento_errado = cruzamento[cruzamento['successful'] == 0].reset_index(drop=True)
      cor_linhas_campo = 'white'

      cor_fundo = '#2c2b2b'
    


      pitch = Pitch(pitch_type='wyscout', figsize=(15,10),pitch_color=cor_fundo,orientation='horizontal',half=True,
                      stripe=False, line_zorder=2)
      fig, ax = pitch.draw()

      # zo =12
      cor_ponto = 'black' 
      def plot_scatter_df(df,cor,zo):
        pitch.scatter(df.to_x, df.to_y, s=200, edgecolors=cor,lw=2, c=cor_fundo, zorder=zo+1, ax=ax)
        # plt.scatter(data=df, x='to_x',y='to_y',color=cor,zorder=zo+1,label='df',edgecolors='white',s=200)
        for linha in range(len(df)):
          x_inicial = df['x'][linha]
          y_inicial = df['y'][linha]
          x_final = df['to_x'][linha]
          y_final = df['to_y'][linha]
          # plt.plot([x_inicial,x_final],[y_inicial,y_final],color=cor,lw=5)
          lc1 = pitch.lines(x_inicial, y_inicial,
                        x_final, y_final,
                        lw=5, transparent=True, comet=True, label='completed passes',
                        color=cor, ax=ax,zorder=zo)

      plot_scatter_df(cruzamento_certo,'#00FF79',zo=12)
      plot_scatter_df(cruzamento_errado,'#FD2B2C',zo=9)
      plt.savefig('cruzamento.png',facecolor=cor_fundo,dpi=300)
      sleep(15)
      tamanho_arte = (2600,2100)
      # st.image('cruzamento.png')
      cor_fundo = '#2c2b2b'
      arte = Image.new('RGB',tamanho_arte,cor_fundo)
      W,H = arte.size

      font = ImageFont.truetype('Fonte/Camber-Bd.ttf',150)
      msg = f'Cruzamentos'
      draw = ImageDraw.Draw(arte)
      w, h = draw.textsize(msg,spacing=20,font=font)
      centro = (W-w)/2
      altura_titulo = 100
      draw.text((centro,altura_titulo),msg, fill='white',spacing= 20,font=font)
    

      im = Image.open('cruzamento.png')
      im = im.rotate(90,expand=1)
      border = (0, 300, 0, 0) # left, up, right, bottom
      im = ImageOps.crop(im, border)
      w,h = im.size
      im = im.copy()
      centro = (W-w)/2
      altura_imagem = altura_titulo+300
      arte.paste(im,(int(centro),altura_imagem))

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',50)
      msg = f'{partida_escolhida}'
      draw.text((int(centro+120),altura_titulo+380),msg, fill='white',spacing= 20,font=font)

      legenda = Image.open('Imagens_aux/legenda-acerto-erro.png')
      w,h= legenda.size
      legenda = legenda.resize((int(w/5),int(h/5)))
      legenda = legenda.copy()
      arte.paste(legenda,(int(centro +50),1800))


      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',60)
      msg = f'Certo'
      draw.text((centro+230,1850),msg, fill='white',spacing= 20,font=font)

      msg = f'Errado'
      draw.text((centro+630,1850),msg, fill='white',spacing= 20,font=font)

      fot =Image.open('Logos/Copy of pro_branco.png')
      w,h = fot.size
      fot = fot.resize((int(w/3),int(h/3)))
      fot = fot.copy()
      x_footure = int(W - W*0.4)
      y_footure = int(H - H*0.2)
      arte.paste(fot,(x_footure,y_footure),fot)

      logo_url = times_csv[times_csv['Id'] == team_id[0]].reset_index(drop=True)['Logo'][0]
      try:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(100,100),im)
      except:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(100,100))
        

      arte.save('arte_cruzamento.png')
      st.image('arte_cruzamento.png')
    cruzamentos_streamlit()

  if gráfico_selecionados == 'xG':
    def xg_streamlit():
      headers = {'Accept': '*/*',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
                'Connection': 'keep-alive',
                'Host': 'searchapi.wyscout.com',
                'Origin': 'https://platform.wyscout.com',
                'Referer': 'https://platform.wyscout.com/app/?',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'}

      payload = {
          'match_id': match_id,
          'lang': 'en',
          'score': 'winning,draw,losing',
          'minutes': '',
          'formation': '', 
          'opp_formation': '',
          'token': token,
          'groupId': '1231619',
          'subgroupId': '286367'
                }
        

      site = 'https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/shots?'.format(team_id[0])

      r = requests.get(site,headers=headers,data=payload)
      if r.status_code == 200:
        st.write('Coletando xG')
      if r.status_code != 200:
        st.write('Erro')
      
      parsed = json.loads(r.text)
      data = json.loads(r.text)
      df= json_normalize(data,sep='_') 
      xg_time = pd.DataFrame(df['data_shots'][0])
      xg_final = xg_time
      xg_soma = round(xg_final['xg'].sum(),2)

      cor_linhas_campo = 'white'
      cor_fundo = '#2c2b2b'

      pitch = Pitch(pitch_type='wyscout', figsize=(15,10),pitch_color=cor_fundo,orientation='horizontal',half=True,
                  stripe=False, line_zorder=2)
      fig, ax = pitch.draw()

      zo= 12
      

      for i in range(len(xg_final)):
          x = (xg_final['x'][i])
          y = (xg_final['y'][i])
          xg_valor = xg_final['xg']
          tamanho_dot = [1400 * x for x in xg_valor][i]

      
          if xg_final['shotOutcome'][i] == 'goal':
              plt.scatter(x, y, marker='o', s=tamanho_dot, color='#00F979', alpha=0.8,label='gol',zorder=zo+1,ec='white',lw=2)
          else:
              plt.scatter(x, y, marker='o', s=tamanho_dot, color=cor_fundo, alpha=0.8,zorder=zo,ec='white',lw=2)

      plt.savefig('xG.png',facecolor=cor_fundo,dpi=300)
      sleep(15)
    
      # st.image('cruzamento.png')
      cor_fundo = '#2c2b2b'
      tamanho_arte = (2600,2100)
      arte = Image.new('RGB',tamanho_arte,cor_fundo)
      W,H = arte.size

      font = ImageFont.truetype('Fonte/Camber-Bd.ttf',150)
      msg = f'Mapa xG'
      draw = ImageDraw.Draw(arte)
      w, h = draw.textsize(msg,spacing=20,font=font)
      centro = (W-w)/2
      altura_titulo = 100
      draw.text((centro,altura_titulo),msg, fill='white',spacing= 20,font=font)
    

      im = Image.open('xG.png')
      im = im.rotate(90,expand=1)
      border = (0, 300, 0, 0) # left, up, right, bottom
      im = ImageOps.crop(im, border)
      w,h = im.size
      im = im.copy()
      centro = (W-w)/2
      altura_imagem = altura_titulo+300
      arte.paste(im,(int(centro),altura_imagem))

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',50)
      msg = f'{partida_escolhida}'
      draw.text((int(centro+120),altura_titulo+380),msg, fill='white',spacing= 20,font=font)

      legenda = Image.open('Imagens_aux/legenda-xg-gol.png')
      w,h= legenda.size
      legenda = legenda.resize((int(w/6),int(h/6)))
      legenda = legenda.copy()
      arte.paste(legenda,(int(centro +70),1650))


      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',60)
      msg = f'Gol'
      draw.text((centro+270,1680),msg, fill='white',spacing= 20,font=font)

      im = Image.open('Imagens_aux/legenda-xg-tamanho (1).png')
      border = (800, 900, 500, 200) # left, up, right, bottom
      im = ImageOps.crop(im, border)
      im = im.rotate(270,expand=4)
      w,h = im.size
      im = im.resize((int(w/2),int(h/2)))
      im = im.copy()
      arte.paste(im,(int(centro+920),1650))

      font = ImageFont.truetype('Fonte/Camber-Rg.ttf',50)
      msg = f'Maior qualidade das chances'
      draw.text((centro+680,1750),msg, fill='white',spacing= 20,font=font)




      fot =Image.open('Logos/Copy of pro_branco.png')
      w,h = fot.size
      fot = fot.resize((int(w/3),int(h/3)))
      fot = fot.copy()
      x_footure = int((W/2)-180)
      y_footure = int(H - H*0.12)
      arte.paste(fot,(x_footure,y_footure),fot)

      font = ImageFont.truetype('Fonte/Camber-Bd.ttf',55)
      msg = f'xG Total: {xg_soma}'
      draw.text(((x_footure+400),1470),msg, fill='white',spacing= 20,font=font)

      logo_url = times_csv[times_csv['Id'] == team_id[0]].reset_index(drop=True)['Logo'][0]
      try:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(100,100),im)
      except:
        r = requests.get(logo_url)
        im_bt = r.content
        image_file = io.BytesIO(im_bt)
        im = Image.open(image_file)
        w,h = im.size
        im = im.resize((int(w*2.5),int(h*2.5)))
        im = im.copy()
        arte.paste(im,(100,100))
        pass
      
      

      arte.save('arte_xG.png')
      st.image('arte_xG.png')
    
    xg_streamlit()

  if gráfico_selecionados == 'Retomada de posse':
    headers = {'Accept': '*/*',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
                'Connection': 'keep-alive',
                'Host': 'searchapi.wyscout.com',
                'Origin': 'https://platform.wyscout.com',
                'Referer': 'https://platform.wyscout.com/app/?',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
                'User-Agent': 'Mozilla/5.0 (X11; CrOS armv7l 12607.81.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.119 Safari/537.36'} 

    payload = {'match_id': match_id,
                'type': 'recoveries', 
                'lang': 'en',
                'score': 'winning,draw,losing',
                'minutes': '',
                'formation': '',
                'opp_formation': '',
                'lang': 'en',
                'token': token,
                'groupId': '1231619',
                'subgroupId': '286367'}  
    
    site = 'https://searchapi.wyscout.com/api/v1/team_stats/teams/{}/events?'.format(team_id[0])
    r = requests.get(site, headers=headers,data=payload)
    r.status_code

    parsed = json.loads(r.text)
    data = json.loads(r.text)
    df= json_normalize(data,sep='_') 
  
    recovery = pd.DataFrame(df['data_events'][0])
  

    cor_linhas_campo = 'white'

    cor_fundo = 'black'
  


    pitch = Pitch(pitch_type='wyscout', figsize=(15,10),pitch_color=cor_fundo,orientation='horizontal',half=False,
                    stripe=False, line_zorder=2)
    fig, ax = pitch.draw()

    sns.kdeplot(recovery["x"],recovery["y"], shade=True, n_levels=250,cmap="CMRmap")

    # for z in range(len(recovery)):
    #   x = (recovery['x'][z])
    #   y = (recovery['y'][z])
    #   plt.scatter(x,y, color='black',s=20)
                  
    plt.savefig('pressao.png',facecolor=cor_fundo,dpi=300)
    sleep(10)
  


    im = Image.open('pressao.png')
    cor_fundo = '#2c2b2b'
    tamanho_arte = (3000,2740)
    arte = Image.new('RGB',tamanho_arte,cor_fundo)
    W,H = arte.size
    im = im.rotate(90,expand=5)
    border = (150, 80, 150, 80) # left, up, right, bottom
    im = ImageOps.crop(im, border)

    w,h = im.size
    im = im.copy()

    arte.paste(im,(300,500))

    font = ImageFont.truetype('Fonte/Camber-Bd.ttf',145)
    msg = f'Mapa de calor - Retomadas de posse'
    draw = ImageDraw.Draw(arte)
    w, h = draw.textsize(msg,spacing=20,font=font)
    draw.text((300,100),msg, fill='white',spacing= 20,font=font)

    font = ImageFont.truetype('Fonte/Camber-Rg.ttf',60)
    msg = f'{partida_escolhida}'
    draw.text((330,430),msg, fill='white',spacing= 20,font=font)
    
   

    fot =Image.open('Logos/Copy of pro_branco.png')
    w,h = fot.size
    fot = fot.resize((int(w/2),int(h/2)))
    fot = fot.copy()
    arte.paste(fot,(2000,2050),fot)

    font = ImageFont.truetype('Fonte/Camber-Rg.ttf',50)
    msg = f'*O mapa de calor é gerado a partir das retomadas de posse do time'
    draw = ImageDraw.Draw(arte)
    w, h = draw.textsize(msg,spacing=20,font=font)
    draw.text(((300,2500)),msg, fill='white',spacing= 20,font=font)

    logo_url = times_csv[times_csv['Id'] == team_id[0]].reset_index(drop=True)['Logo'][0]
    try:
      r = requests.get(logo_url)
      im_bt = r.content
      image_file = io.BytesIO(im_bt)
      im = Image.open(image_file)
      w,h = im.size
      im = im.resize((int(w*2.5),int(h*2.5)))
      im = im.copy()
      arte.paste(im,(2150,470),im)
    except:
      r = requests.get(logo_url)
      im_bt = r.content
      image_file = io.BytesIO(im_bt)
      im = Image.open(image_file)
      w,h = im.size
      im = im.resize((int(w*2.5),int(h*2.5)))
      im = im.copy()
      arte.paste(im,(2150,470))
    arte.save('mapa_calor_retomada.png')
    sleep(5)
    st.image('mapa_calor_retomada.png')



